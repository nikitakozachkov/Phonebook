{"version":3,"file":"static/js/342.9cba5932.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactModal/ContactModal.styled.jsx","components/ContactModal/ContactModal.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const getContacts = state => {\n  const normalizedFilter = state.contacts.filter.toLowerCase();\n\n  return state.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n\nexport const getIsLoading = state => state.contacts.isLoading;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n\n  & ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    \n    display: flex;\n    gap: 8px;\n  }\n\n  & label {\n    width: 100%;\n    max-width: 400px;\n  }\n\n  & label:last-of-type {\n    margin-bottom: 8px;\n  }\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n  margin-bottom: 4px;\n  font-size: 14px;\n`;\n\nexport const Input = styled.input`\n  width: 100%;\n  padding: 4px;\n  outline: 0;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n  color: #2a2a2a;\n`;\n\nexport const Button = styled.button`\n  margin: 0;\n  border: 0;\n  padding: 0;\n  width: 120px;\n  height: 28px;\n  border-radius: 4px;\n  font: inherit;\n  font-size: 14px;\n  color: #868784;\n  background-color: #023047;\n\n  &:hover,\n  &:focus {\n    color: #ffffff;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/actions';\nimport { toast } from 'react-hot-toast';\nimport { Container, Text, Input, Button } from './ContactForm.styled';\n\nexport const ContactForm = ({ onClose }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n\n    const contact = {\n      name: form.elements.name.value.trim(),\n      number: form.elements.phone.value.trim(),\n    };\n\n    form.reset();\n\n    const used = contacts.find(\n      ({ name, number }) =>\n        name.toLowerCase() === contact.name.toLowerCase() ||\n        number === contact.number\n    );\n\n    if (used) {\n      return toast.error(\n        `${contact.name} or ${contact.number} is already in contacts.`\n      );\n    }\n\n    dispatch(addContact(contact));\n    toast.success(`Contact ${contact.name} was successfully added.`);\n    onClose();\n  };\n\n  return (\n    <Container onSubmit={onFormSubmit} autoComplete=\"off\">\n      <label>\n        <Text>Name</Text>\n\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          maxLength=\"16\"\n          required\n        />\n      </label>\n\n      <label>\n        <Text>Phone</Text>\n\n        <Input\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          maxLength=\"12\"\n          required\n        />\n      </label>\n\n      <ul>\n        <li>\n          <Button type=\"submit\">Confirm</Button>\n        </li>\n\n        <li>\n          <Button type=\"button\" onClick={onClose}>\n            Cancel\n          </Button>\n        </li>\n      </ul>\n    </Container>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n\n  &.is-hidden {\n    display: none;\n  }\n`\n\nexport const Modal = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width: 500px;\n  width: calc(100% - 16px);\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  border-radius: 8px;\n  padding: 16px;\n  background-color: #ffffff;\n`","import { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Backdrop, Modal } from './ContactModal.styled';\nimport { useEffect } from 'react';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const ContactModal = ({ onClose }) => {\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [onClose]);\n\n  const handleBackdropClick = event => {\n    if (event.target === event.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <Backdrop onClick={handleBackdropClick}>\n      <Modal>\n        <ContactForm onClose={onClose} />\n      </Modal>\n    </Backdrop>,\n    modalRoot\n  );\n};\n\nContactModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from \"@emotion/styled\"\n\nexport const Container = styled.div`\n  margin-bottom: 12px;\n`\n\nexport const Text = styled.p`\n  margin: 0;\n  margin-bottom: 4px;\n  font-size: 14px;\n`\n\nexport const Input = styled.input`\n  width: 200px;\n  padding: 4px;\n  outline: 0;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n  color: #2a2a2a;\n`\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\nimport { Container, Text, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Text>Find by name</Text>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        onChange={event =>\n          dispatch(setFilter(event.currentTarget.value.trim()))\n        }\n      />\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 4px;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 16px) / 2);\n  }\n\n  @media screen and (min-width: 1024px) {\n    width: calc((100% - 24px) / 3);\n  }\n`;\n\nexport const Text = styled.p`\n  display: inline-block;\n  margin: 0;\n`;\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 0;\n  border: 0;\n  border-radius: 4px;\n  font: inherit;\n  font-size: 12px;\n  color: #868784;\n  background-color: transparent;\n  margin-right: 8px;\n\n  &:hover,\n  &:focus {\n    color: #023047;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/actions';\nimport { AiFillDelete } from 'react-icons/ai';\nimport { toast } from 'react-hot-toast';\nimport { Item, Text, Button } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleClick = async () => {\n    dispatch(deleteContact(id));\n    toast.success(`Contact ${name} was successfully deleted.`);\n  };\n\n  return (\n    <Item>\n      <Text>\n        Name: {name} <br /> Phone: {number}\n      </Text>\n      \n      <Button type=\"button\" onClick={handleClick}>\n        <AiFillDelete style={{ width: '18px', height: '18px' }} />\n      </Button>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { ContactItem } from '../ContactItem/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  \n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const HeaderText = styled.h1`\n  margin: 0;\n  font-size: 24px;\n  margin-right: 12px;\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  padding: 0;\n  border: 0;\n  border-radius: 4px;\n  font: inherit;\n  font-size: 12px;\n  color: #868784;\n  background-color: transparent;\n\n  &:hover, &:focus {\n    color: #023047;\n  }\n`","import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getIsLoading, getContacts } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/actions';\nimport { ContactModal } from 'components/ContactModal/ContactModal';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { AiFillPlusCircle } from 'react-icons/ai';\nimport { HeaderText, Button } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getContacts);\n  const isLoading = useSelector(getIsLoading);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const toggleModal = () => {\n    switch (isModalOpen) {\n      case false:\n        return setIsModalOpen(true);\n      case true:\n        return setIsModalOpen(false);\n      default:\n        return;\n    }\n  };\n\n  return (\n    <>\n      {isModalOpen && <ContactModal onClose={toggleModal} />}\n\n      <div\n        style={{ display: 'flex', alignItems: 'center', marginBottom: '16px' }}\n      >\n        <HeaderText>Contacts</HeaderText>\n        <Button onClick={toggleModal}>\n          <AiFillPlusCircle style={{ width: '22px', height: '22px' }} />\n        </Button>\n      </div>\n      <Filter />\n      {isLoading && <p>Loading...</p>}\n      {contacts.length !== 0 ? (\n        <ContactList />\n      ) : (\n        <p>There is no contacts yet.</p>\n      )}\n    </>\n  );\n}\n"],"names":["getContacts","state","normalizedFilter","contacts","filter","toLowerCase","items","contact","name","includes","getIsLoading","isLoading","Container","styled","Text","Input","Button","ContactForm","onClose","dispatch","useDispatch","useSelector","onSubmit","event","preventDefault","form","currentTarget","elements","value","trim","number","phone","reset","find","toast","addContact","autoComplete","type","pattern","title","maxLength","required","onClick","Backdrop","Modal","modalRoot","document","querySelector","ContactModal","useEffect","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","target","Filter","onChange","setFilter","Item","ContactItem","id","handleClick","deleteContact","style","width","height","List","ContactList","map","HeaderText","Contacts","fetchContacts","useState","isModalOpen","setIsModalOpen","toggleModal","display","alignItems","marginBottom","length"],"sourceRoot":""}